#!/usr/bin/python
 # vim: set ts=2 expandtab:
"""
Module: test_one
Desc:
Author: John O'Neil
Email:

Second test.
Attempting to use MSER to identify text

"""

import numpy as np
import cv
import cv2
import sys

if __name__ == '__main__':

  #for a typical manga page of 1354x2029 pixels (a typical scan of 150/160ppi)
  #character vertical and horizontal strokes will generally be about 4 px wide
  #(that's for a normal font). for bolder fonts, they will be about 8 or 9 pixels

  #1. convert image to grayscale
  img = cv2.imread(sys.argv[1])
  gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  #binary = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,5,0)
  (binthresh,binary) = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY )

  #2 get image geometry
  (height, width, depth) = img.shape
  print 'dealing with input image ' +str(width) +'px width and ' + str(height) + 'px high'

  #1 do a horizontal closing (dilation then erosion) followed by smaller horizontal opening
  #(erosion followed by dilation)
  grayscale_kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(3,3))
  closing1 = cv2.dilate(gray,grayscale_kernel,iterations=3)
  closing2 = cv2.erode(closing1,grayscale_kernel,iterations=3)
  opening1 = cv2.erode(closing2,grayscale_kernel,iterations=2)
  opening2 = cv2.dilate(opening1,grayscale_kernel,iterations=2)

  #try to get basic white areas by dilating
  white_dilation_kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))
  white_areas = cv2.dilate(gray,white_dilation_kernel,iterations=5)

  #1 Do a 8x rank reduction, a 4x4 closing and then 8x expansion back to original size
  #this is to create our halftone mask

  #form grayscale mask by opening white areas (open is a dilation and then erosion)
  #white_kernel =  cv2.getStructuringElement(cv2.MORPH_CROSS,(3,3))
  horizontal_k = [[1,1,1],[1,1,0],[1,0,0]]
  vertical_k = [[0,1,1],[0,1,1],[0,1,1]]
  horizontal_kernel = np.array(horizontal_k, dtype=np.uint8)
  vertical_kernel = np.array(vertical_k, dtype=np.uint8)
  white_kernel =  cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))
  white_dilated_vert = cv2.pyrUp(cv2.dilate(cv2.pyrDown(gray),horizontal_kernel,iterations =7))
  white_dilated_horiz = cv2.pyrUp(cv2.dilate(cv2.pyrDown(gray),horizontal_kernel,iterations =7))
  #grayscale_mask = cv2.erode(white_dilated,white_kernel,iterations =5)
  #(thresh, thresholded_mask) = cv2.threshold(grayscale_mask, 240, 255, cv2.THRESH_BINARY )
  #dst = cv2.bitwise_and(img,img,mask = thresholded_mask)

  #reduce image size to eliminate text?
  #reduction_kernel =  cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))
  #reduced_1 = cv2.pyrDown(gray)
  #reduced_2 = cv2.pyrDown(reduced_1)
  #reduced_3 = cv2.pyrDown(reduced_2)
  #reduced_dilated = cv2.dilate(reduced_2,reduction_kernel,iterations = 2)
  #reduced_eroded = cv2.erode(reduced_dilated,reduction_kernel,iterations = 2)
  #enlarged_1 = cv2.pyrUp(reduced_dilated)
  #enlarged_2 = cv2.pyrUp(enlarged_1)
  #enlarged_3 = cv2.pyrUp(enlarged_2)

  #enlarged_dilated = cv2.pyrUp(cv2.pyrUp(reduced_dilated))
  #enlarged_eroded = cv2.pyrUp(cv2.pyrUp(reduced_eroded))

  #tophat operation to adjust background?
  shaped_k = [[0,0,1,0,0],[0,0,1,0,0],[0,1,0,1,0],[0,0,1,0,0],[0,0,1,0,0]]
  shaped_kernel = np.array(shaped_k , dtype=np.uint8)
  tophat_kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(3,3))
  #tophat_kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(5,5))
  tophat_white = cv2.morphologyEx(binary, cv2.MORPH_TOPHAT, tophat_kernel,iterations=5)
  whitehat_inv = cv2.bitwise_not(tophat_white)
  #tophat_black = cv2.pyrUp(cv2.morphologyEx(cv2.pyrDown(gray), cv2.MORPH_BLACKHAT, tophat_kernel, iterations=8))
  tophat_black = cv2.morphologyEx(binary, cv2.MORPH_BLACKHAT, tophat_kernel, iterations=5)
  blackhat_inv = cv2.bitwise_not(tophat_black)
  (thresh,blackhat_inv_thresh) = cv2.threshold(blackhat_inv, 1, 255, cv2.THRESH_BINARY_INV )
  #blackhat_inv_thresh = cv2.adaptiveThreshold(blackhat_inv,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,31,0)

  #do a multi-iteration dilation to open up our white areas.
  #after this operation we're pretty sure that any nonwhite areas are not of interest
  dilation_kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))
  text = cv2.dilate(tophat_white,dilation_kernel,iterations=5)
  #cv.CreateStructuringElementEx(cols, rows, anchorX, anchorY, shape, values=None)
  #closing_kernel = cv.CreateStructuringElementEx(4,4,0,0,cv.CV_SHAPE_CUSTOM,values=[[1,0,0,1],[0,1,1,0],[0,1,1,0],[1,0,0,1]])
  #colosing_2 = cv2.morphologyEx(gray, cv2.MORPH_CLOSE, tophat_kernel, iterations=1)
  #opening_2 = cv2.morphologyEx(gray, cv2.MORPH_OPEN, tophat_kernel, iterations=1)

  #look at sobel image gradient in vertical and horizontal
  gradient_vertical = cv2.Sobel(cv2.pyrDown(cv2.pyrDown(gray)), cv2.CV_8U, 0, 2,ksize=3)
  gradient_horizontal = cv2.Sobel(cv2.pyrDown(cv2.pyrDown(gray)), cv2.CV_8U, 2, 0,ksize=3)
  gradient_vert_inv = cv2.bitwise_not(gradient_vertical)
  gradient_horiz_inv = cv2.bitwise_not(gradient_horizontal)
  gradient_diff = cv2.subtract(gradient_vertical,gradient_horizontal)

  #reduction_kernel =  cv2.getStructuringElement(cv2.MORPH_RECT,(2,2))
  reduction_kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(5,5))
  (seed_thresh,binary_seed) = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY )
  reduced_eroded_v = cv2.pyrUp(cv2.erode(cv2.pyrDown(binary_seed),vertical_kernel,iterations = 2))
  reduced_eroded_h = cv2.pyrUp(cv2.erode(cv2.pyrDown(binary_seed),horizontal_kernel,iterations = 2))
  reduced_eroded = reduced_eroded_v #+ reduced_eroded_h

  reduced_dilated = cv2.pyrUp(cv2.dilate(cv2.pyrDown(binary_seed),reduction_kernel,iterations = 2))
  (rtt,reduced_dilated_thresh) = cv2.threshold(reduced_dilated, 250, 255, cv2.THRESH_BINARY )

  masked = reduced_dilated_thresh * cv2.pyrUp(cv2.pyrDown(gray))

  cv2.imshow('vert',whitehat_inv)
  cv2.imshow('horiz',blackhat_inv)

  #wordmask = binary - whitehat_inv
  whitemask = cv2.add(binary, binary, mask=whitehat_inv)
  cv2.imshow('whitemask',whitemask)
  #cv2.imshow('eroded',enlarged_eroded )the
  #cv2.imshow('horizontal', gradient_horiz_inv)

  #apply the whitemask to the original image
  masked = cv2.add(gray, gray, mask=cv2.bitwise_not(whitemask))
  #cv2.imshow('masked',reduced_eroded_h)

  #tones = cv2.pyrUp(cv2.pyrUp(cv2.dilate(cv2.pyrDown(cv2.pyrDown(gray)), reduction_kernel, iterations =3)))
  #tones = cv2.pyrUp(cv2.pyrDown(gray))
  #(tonmask_thresh,tonemask) = cv2.threshold( tones, 220, 255, cv2.THRESH_BINARY )
  #cv2.imshow('tones',tones)

  #words = cv2.pyrUp(cv2.pyrDown(whitemask)) - tonemask
  #words = cv2.erode(cv2.dilate(whitemask,reduction_kernel,iterations = 2),reduction_kernel,iterations = 2)
  #cv2.imshow('words',words)

  contours,hierarchy = cv2.findContours(whitemask,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
  mser_kernel = cv2.getStructuringElement(cv2.MORPH_CROSS,(3,3))
  mser = cv2.MSER(_delta=5, _min_area=1, _max_area=10000000, _max_variation=0.25, _min_diversity=0.5, _max_evolution=200, _area_threshold=1.01, _min_margin=0.3, _edge_blur_size=5)
  regions = mser.detect(whitemask, None)

  for p in reversed(regions):
    #x,y,w,h = cv2.boundingRect(p.reshape(-1, 1, 2))
    value = np.random.randint(0,255,(3,)).tolist()
    #cv2.rectangle(thresh,(x,y),(x+w,y+h),value,2)
    
    #rect = cv2.minAreaRect(p)
    #box = cv2.cv.BoxPoints(rect)
    #box = np.int0(box)
    
    #cv2.drawContours(img,[box],0,(0,0,255),2)
    cv2.drawContours(img,[p],-1,value,3)

  for cnt in contours:
    moments = cv2.moments(cnt) # Calculate moments
    if moments['m00']!=0:
      cx = int(moments['m10']/moments['m00']) # cx = M10/M00
      cy = int(moments['m01']/moments['m00']) # cy = M01/M00
      moment_area = moments['m00'] # Contour area from moment
      contour_area = cv2.contourArea(cnt) # Contour area using in_built function

    cv2.drawContours(img,[cnt],0,(0,255,0),1) # draw contours in green color
    #cv2.circle(tophat_black,(cx,cy),2,(0,0,255),-1) # draw centroids in red color
  
  cv2.imshow('img',img)

  if cv2.waitKey(0) == 27:
    cv2.destroyAllWindows()
  cv2.destroyAllWindows()
